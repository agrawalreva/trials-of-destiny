using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(
    typeof(CharacterMovement),
    typeof(CharacterJump)
)]
public class InputManager : MonoBehaviour
{
    PlayerInputActions playerInputActions;

    CharacterMovement characterMovement;
    CharacterJump characterJump;
    CharacterAttack characterAttack;

    void Awake()
    {
        playerInputActions = new PlayerInputActions();

        characterMovement = GetComponent<CharacterMovement>();
        characterJump = GetComponent<CharacterJump>();
        characterAttack = GetComponent<CharacterAttack>();
    }

    void OnEnable()
    {
        playerInputActions.Player.Enable();

        playerInputActions.Player.Move.performed += Move;
        playerInputActions.Player.Move.canceled += Move;

        playerInputActions.Player.Jump.performed += Jump;

        playerInputActions.Player.ReleaseJump.performed += ReleaseJump;

        playerInputActions.Player.Attack.performed += Attack;
    }

    void OnDisable()
    {
        playerInputActions.Player.Disable();

        playerInputActions.Player.Move.performed -= Move;
        playerInputActions.Player.Move.canceled -= Move;

        playerInputActions.Player.Jump.performed -= Jump;

        playerInputActions.Player.ReleaseJump.performed -= ReleaseJump;

        playerInputActions.Player.Attack.performed -= Attack;
    }

    void Move(InputAction.CallbackContext context)
    {
        characterMovement.SetDirection(context.ReadValue<float>());
    }

    void Jump(InputAction.CallbackContext context)
    {
        characterJump.Jump();
    }

    void ReleaseJump(InputAction.CallbackContext context)
    {
        characterJump.ReleaseJump();
    }

    void Attack(InputAction.CallbackContext context)
    {
        characterAttack.Attack();
    }
}
